const example = {
    data() {
        return {
            data: [],
            total: 0,
            loading: false,
            sortField: 'vote_count',
            sortOrder: 'desc',
            defaultSortOrder: 'desc',
            page: 1,
            perPage: 20
        }
    },
    methods: {
        /*
         * Load async data
         */
        loadAsyncData() {
            const params = [
                'api_key=bb6f51bef07465653c3e553d6ab161a8',
                'language=en-US',
                'include_adult=false',
                'include_video=false',
                `sort_by=${this.sortField}.${this.sortOrder}`,
                `page=${this.page}`
            ].join('&')

            this.loading = true
            axios.get(`https://api.themoviedb.org/3/discover/movie?${params}`)
                .then(({ data }) => {
                    // api.themoviedb.org manage max 1000 pages
                    this.data = []
                    let currentTotal = data.total_results
                    if (data.total_results / this.perPage > 1000) {
                        currentTotal = this.perPage * 1000
                    }
                    this.total = currentTotal
                    data.results.forEach((item) => {
                        item.release_date = item.release_date.replace(/-/g, '/')
                        this.data.push(item)
                    })
                    this.loading = false
                })
                .catch((error) => {
                    this.data = []
                    this.total = 0
                    this.loading = false
                    throw error
                })
        },
        /*
         * Handle page-change event
         */
        onPageChange(page) {
            this.page = page
            this.loadAsyncData()
        },
        /*
         * Handle sort event
         */
        onSort(field, order) {
            this.sortField = field
            this.sortOrder = order
            this.loadAsyncData()
        },
        /*
         * Type style in relation to the value
         */
        type(value) {
            const number = parseFloat(value)
            if (number < 6) {
                return 'is-danger'
            } else if (number >= 6 && number < 8) {
                return 'is-warning'
            } else if (number >= 8) {
                return 'is-success'
            }
        }
    },
    filters: {
        /**
         * Filter to truncate string, accepts a length parameter
         */
        truncate(value, length) {
            return value.length > length
                ? value.substr(0, length) + '...'
                : value
        }
    },
    mounted() {
        this.loadAsyncData()
    }
}


            const app = new Vue(example)

            app.$mount('#app')
        